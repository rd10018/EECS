package asymmetric;
import java.math.BigInteger;
import java.security.SecureRandom;
    

public class RSA {
   private final static BigInteger one      = new BigInteger("1");
   private final static SecureRandom random = new SecureRandom();

   BigInteger d ;
   private BigInteger e;
   private BigInteger n ;
   private BigInteger p;
   private BigInteger q;
   private BigInteger phi;
   // generate an N-bit (roughly) public and private key
   RSA() {
	   //Question 1 
//	   n= new BigInteger("94587468335128982981605019776781234618384857805657005686084562260910788622013722070926491690843853690071248130134427832324966728582532832363221542231787068203763027067400082835394459857525017707284768411819006776211493735326500782954621660256501187035611332577696332459049538105669711385995976912007767106063");
//	   e  = new BigInteger("74327");
//	   d = new BigInteger("7289370196881601766768920490284861650464951706793000236386405648425161747775298344104658393385359209126267833888223695609366844098655240542152017354442883676634193191857568369042999854440242050353181703706753485749165295123694487676952198090537385200990850805837963871485320168470788328336240930212290450023");
	   

	   
	   //QUESTION 2
//	   n = new BigInteger("94587468335128982981605019776781234618384857805657005686084562260910788622013722070926491690843853690071248130134427832324966728582532832363221542231787068203763027067400082835394459857525017707284768411819006776211493735326500782954621660256501187035611332577696332459049538105669711385995976912007767106063");
//	   e  = new BigInteger("74327");
//	   p = new BigInteger("10358344307803887695931304169230543785620607743682421994532795393937342395753127888522373061586445417642355843316524942445924294144921649080401518286829171");
//	   q = n.divide(p);
//	   System.out.println("this is q  " + q);
//	   System.out.println("this is the n " + p.multiply(q));
//	   phi = (p.subtract(one)).multiply(q.subtract(one));
//	   System.out.println("the value of phis is " + phi);
//	   d = e.modInverse(phi);
//	   System.out.println("the va d is " + d);
	   
	   
	   
	   
	   //QUESTION 3
//	   e  = new BigInteger("65537");
//	   q = new BigInteger("87020952829623092932322362936864583897972618059974315662422560067745889600571");
//	   phi = new BigInteger("8584037913642434144111279062847405921823163865842701785008602377400681495147541519557274092429073976252689387304835782258785521935078205581766754116919200");
//	   p = phi.divide(q.subtract(one)).add(one);
//	  // System.out.println("This is the value of p  " + p);
//	   n = p.multiply(q);
//	   System.out.println("the value of phis is " + phi);
//	   d = e.modInverse(phi);

	   
	   
	// ACTIVITY C TEST QUESTION  
//	 n = new BigInteger("9632741694124660286929058751207584467462886942209773634173459610950167677820678771993280639130074667570059590197053917456185767998392880005770614759316769");
//	d = new BigInteger("8965125933145723435359718045678345940014964084828898233785200033953621403120050500488126981550967283842262719752554347634154152656128349439721008860742125");
//	 e = new BigInteger("101"); 
	   
	   
	    n = new BigInteger("7851789389044848597228817431643372999651233721802921718845812406450693575363322780967149235740347104936366160421129466685666044045661620102176340853711369");
	    e = new BigInteger("101");
	    d = new BigInteger("3576062494020426093787382196590051069148086645573607911553538323730018856105986551933461609096350969475082676737033132938594422156886793361498635637355117");
	   
   }


   BigInteger encrypt(BigInteger message) {
      return message.modPow(e, n);
   }

   BigInteger decrypt(BigInteger encrypted) {
      return encrypted.modPow(d, n);
   }

   public String toString() {
      String s = "";
      s += "public  = " + e  + "\n";
      s += "private = " + d + "\n";
      s += "modulus = " + n;
      return s;
   }
 
   public static void main(String[] args) {
      //int N = Integer.parseInt(args[0]);
      RSA key = new RSA();
      //System.out.println(key);
 
      // create random message, encrypt and decrypt
   
      //ACTIVITY -C  QUESTION 1
     // BigInteger ct = new BigInteger("87014856975716299121085087309577038316883175412853820115551293556230488405826385706604303724175236985573832006395540199066061101502996745421485579743246846982636317440505885092956723199407403632041108913018671613508572002898008615700858579079601105011909417884801902333329415712320494308682279897714456370814");
      
     
      
      //ACTIVITY -C  QUESTION 2
      //BigInteger ct = new BigInteger("10870101966939556606443697147757930290262227730644958783498257036423105365610629529910525828464329792615002602782366786531253275463358840412867833406256467153345139501952173409955322129689670345445632775574301781800376545448990332608558103266831217073027652061091790342124418143422318965525239492387183438956");      
      
      //ACTIVITY - C TEST 
      //BigInteger ct = new BigInteger("3694272279806844067114423556929955611535020210685874755462747783781659874165958228980277049681148004784077830859817198352809477470248789605558004536347308");
      BigInteger ct = new BigInteger("5747989465777620642845859320696841245384308321593981475028342545647010023308736315998931401749995696547958525769637777660623851735435952278292605060547953");
     
      //ACTIVITY - C Question 3
      //BigInteger ct = new BigInteger("1817487313698347891034157970684926175211834109573277793102901854482611726141560963120214926234448852417078321539316776648109260519063106558303669880226359");
      
      //// create message by converting string to integer
      // String s = "test";
      // byte[] bytes = s.getBytes();
      // BigInteger message = new BigInteger(bytes);

     // BigInteger encrypt = key.encrypt(message);
      BigInteger decrypt = key.decrypt(ct);

     // System.out.println("message   = " + );
      System.out.println("encrypted = " + ct);
      byte[] pt = decrypt.toByteArray();
      System.out.println("the length of the byte array is " + pt.length);
      for(int i=0;i< pt.length; i++)
      {
    	  System.out.print((char)pt[i]);
      }
      System.out.println();
    
//      
//      BigInteger encrypt = key.encrypt(decrypt);
//      System.out.println("this is the final encrypted   " + encrypt);
   }
}
